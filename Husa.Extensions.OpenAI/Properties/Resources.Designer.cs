//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Husa.Extensions.OpenAI.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Husa.Extensions.OpenAI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I want you to analyze a list of images to check for the presence of specific persons or branding signals. For each image, identify whether the specified entities are present and provide a brief explanation. Here&apos;s the prompt structure:
        ///
        ///1. **Input**: A list of images uploaded to the chat.
        ///2. **Task**: Analyze each image and check for the presence of specific persons or brands.
        ///3. **Output**:
        ///   - Indicate whether the person(s) or brand(s) are present in each image.
        ///   - Provide a short explanation for [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocatePeopleAndBrandingsInstruction {
            get {
                return ResourceManager.GetString("LocatePeopleAndBrandingsInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;ve uploaded several images. For each, tell me if it contains persons or branding signals, and explain your reasoning. Put your response in json format like this: 
        ///{&quot;images&quot;: [{&quot;image_index&quot;: 1, &quot;contains_persons: &quot;false, &quot;contains_branding&quot;: false, &quot;explanation&quot;: &quot;no persons or brandings signals found&quot;}]}..
        /// </summary>
        internal static string LocatePeopleAndBrandingsPrompt {
            get {
                return ResourceManager.GetString("LocatePeopleAndBrandingsPrompt", resourceCulture);
            }
        }
    }
}
